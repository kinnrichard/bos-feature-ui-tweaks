// ü§ñ AUTO-GENERATED ZERO SCHEMA
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated from your Rails schema.
// Any manual changes will be overwritten on the next generation.
//
// üîß FOR CUSTOMIZATIONS:
// 1. Create a separate file like 'custom-schema-extensions.ts'
// 2. Import and extend this schema in your application code
// 3. Use Zero's schema composition features for custom relationships
//
// üîÑ TO REGENERATE: Run `rails zero:generate_schema`
// üìö DOCS: https://zero.rocicorp.dev/docs/schema

import {
  createSchema,
  table,
  string,
  number,
  boolean,
  json,
  relationships,
  type Zero,
} from '@rocicorp/zero';

// Activity logs table
const activity_logs = table('activity_logs')
  .columns({
    action: string().optional(),
    loggable_type: string(),
    metadata: json().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    user_id: string().optional(),
    client_id: string().optional(),
    job_id: string().optional(),
    loggable_id: string().optional(),
  })
  .primaryKey('id');

// Contact methods table
const contact_methods = table('contact_methods')
  .columns({
    value: string().optional(),
    formatted_value: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    person_id: string().optional(),
    contact_type: string(),
    normalized_value: string(),
  })
  .primaryKey('id');

// Jobs table
const jobs = table('jobs')
  .columns({
    title: string().optional(),
    created_at: number(),
    updated_at: number(),
    description: string().optional(),
    lock_version: number(),
    id: string(),
    client_id: string().optional(),
    due_at: number().optional(),
    due_time_set: boolean(),
    starts_at: number().optional(),
    start_time_set: boolean(),
    status: string(),
    priority: string(),
  })
  .primaryKey('id');

// Clients table
const clients = table('clients')
  .columns({
    name: string().optional(),
    created_at: number(),
    updated_at: number(),
    name_normalized: string().optional(),
    id: string(),
    client_type: string(),
  })
  .primaryKey('id');

// Devices table
const devices = table('devices')
  .columns({
    name: string().optional(),
    model: string().optional(),
    serial_number: string().optional(),
    location: string().optional(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    client_id: string().optional(),
    person_id: string().optional(),
  })
  .primaryKey('id');

// Job assignments table
const job_assignments = table('job_assignments')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    user_id: string().optional(),
  })
  .primaryKey('id');

// Job people table
const job_people = table('job_people')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    person_id: string().optional(),
  })
  .primaryKey('id');

// People groups table
const people_groups = table('people_groups')
  .columns({
    id: string(),
    name: string(),
    is_department: boolean(),
    client_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// People group memberships table
const people_group_memberships = table('people_group_memberships')
  .columns({
    id: string(),
    person_id: string(),
    people_group_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Notes table
const notes = table('notes')
  .columns({
    notable_type: string(),
    content: string().optional(),
    created_at: number(),
    updated_at: number(),
    metadata: json().optional(),
    id: string(),
    user_id: string().optional(),
    notable_id: string().optional(),
  })
  .primaryKey('id');

// Job targets table
const job_targets = table('job_targets')
  .columns({
    target_type: string(),
    status: string().optional(),
    instance_number: number(),
    reason: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    target_id: string().optional(),
  })
  .primaryKey('id');

// Front conversations table
const front_conversations = table('front_conversations')
  .columns({
    id: string(),
    front_id: string(),
    subject: string().optional(),
    status: string().optional(),
    status_category: string().optional(),
    status_id: string().optional(),
    is_private: boolean().optional(),
    created_at_timestamp: number().optional(),
    waiting_since_timestamp: number().optional(),
    custom_fields: json().optional(),
    metadata: json().optional(),
    links: json().optional(),
    scheduled_reminders: json().optional(),
    api_links: json().optional(),
    assignee_id: string().optional(),
    recipient_contact_id: string().optional(),
    created_at: number(),
    updated_at: number(),
    last_message_front_id: string().optional(),
    recipient_handle: string().optional(),
    recipient_role: string().optional(),
  })
  .primaryKey('id');

// Scheduled date times table
const scheduled_date_times = table('scheduled_date_times')
  .columns({
    schedulable_type: string(),
    scheduled_type: string(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    schedulable_id: string().optional(),
    scheduled_at: number().optional(),
    scheduled_time_set: boolean(),
  })
  .primaryKey('id');

// Scheduled date time users table
const scheduled_date_time_users = table('scheduled_date_time_users')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    scheduled_date_time_id: string().optional(),
    user_id: string().optional(),
  })
  .primaryKey('id');

// People table
const people = table('people')
  .columns({
    name: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    client_id: string().optional(),
    name_preferred: string().optional(),
    name_pronunciation_hint: string().optional(),
    is_active: boolean().optional(),
    title: string().optional(),
  })
  .primaryKey('id');

// Front contacts table
const front_contacts = table('front_contacts')
  .columns({
    id: string(),
    front_id: string().optional(),
    name: string().optional(),
    handle: string().optional(),
    role: string().optional(),
    handles: json().optional(),
    api_links: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Tasks table
const tasks = table('tasks')
  .columns({
    title: string().optional(),
    position: number(),
    created_at: number(),
    updated_at: number(),
    subtasks_count: number().optional(),
    reordered_at: number().optional(),
    lock_version: number(),
    applies_to_all_targets: boolean(),
    id: string(),
    job_id: string().optional(),
    assigned_to_id: string().optional(),
    parent_id: string().optional(),
    discarded_at: number().optional(),
    status: string(),
    repositioned_after_id: string().optional(),
    position_finalized: boolean(),
    repositioned_to_top: boolean(),
  })
  .primaryKey('id');

// Front inboxes table
const front_inboxes = table('front_inboxes')
  .columns({
    id: string(),
    front_id: string(),
    name: string(),
    inbox_type: string().optional(),
    handle: string().optional(),
    settings: json().optional(),
    api_links: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front tags table
const front_tags = table('front_tags')
  .columns({
    id: string(),
    front_id: string(),
    name: string(),
    highlight: string().optional(),
    description: string().optional(),
    is_private: boolean().optional(),
    is_visible_in_conversation_lists: boolean().optional(),
    created_at_timestamp: number().optional(),
    updated_at_timestamp: number().optional(),
    parent_tag_id: string().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front messages table
const front_messages = table('front_messages')
  .columns({
    id: string(),
    front_id: string(),
    front_conversation_id: string(),
    message_uid: string().optional(),
    message_type: string().optional(),
    is_inbound: boolean().optional(),
    is_draft: boolean().optional(),
    subject: string().optional(),
    blurb: string().optional(),
    body_html: string().optional(),
    body_plain: string().optional(),
    error_type: string().optional(),
    draft_mode: string().optional(),
    metadata: json().optional(),
    api_links: json().optional(),
    created_at_timestamp: number().optional(),
    author_id: string().optional(),
    created_at: number(),
    updated_at: number(),
    author_type: string().optional(),
    author_handle: string().optional(),
    author_name: string().optional(),
  })
  .primaryKey('id');

// Front attachments table
const front_attachments = table('front_attachments')
  .columns({
    id: string(),
    front_message_id: string(),
    filename: string().optional(),
    content_type: string().optional(),
    url: string().optional(),
    size: number().optional(),
    metadata: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Users table
const users = table('users')
  .columns({
    name: string().optional(),
    email: string().optional(),
    created_at: number(),
    updated_at: number(),
    password_digest: string().optional(),
    resort_tasks_on_status_change: boolean(),
    id: string(),
    role: string(),
    short_name: string().optional(),
  })
  .primaryKey('id');

// Front conversation tags table
const front_conversation_tags = table('front_conversation_tags')
  .columns({
    id: string(),
    front_conversation_id: string(),
    front_tag_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front message recipients table
const front_message_recipients = table('front_message_recipients')
  .columns({
    id: string(),
    front_message_id: string(),
    front_contact_id: string().optional(),
    role: string(),
    handle: string(),
    name: string().optional(),
    api_links: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front conversation inboxes table
const front_conversation_inboxes = table('front_conversation_inboxes')
  .columns({
    id: string(),
    front_conversation_id: string(),
    front_inbox_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Parsed emails table
const parsed_emails = table('parsed_emails')
  .columns({
    id: string(),
    parseable_type: string(),
    parseable_id: string(),
    plain_message: string().optional(),
    plain_signature: string().optional(),
    html_message: string().optional(),
    html_signature: string().optional(),
    parse_options: string().optional(),
    parsed_at: number().optional(),
    parser_version: string().optional(),
    parse_errors: string().optional(),
    content_hash: string().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front sync logs table
const front_sync_logs = table('front_sync_logs')
  .columns({
    id: string(),
    resource_type: string(),
    sync_type: string(),
    status: string(),
    started_at: number(),
    completed_at: number().optional(),
    duration_seconds: number().optional(),
    records_synced: number().optional(),
    records_created: number().optional(),
    records_updated: number().optional(),
    records_failed: number().optional(),
    error_messages: string().optional(),
    metadata: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// People front conversations table
const people_front_conversations = table('people_front_conversations')
  .columns({
    id: string(),
    person_id: string(),
    front_conversation_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Clients front conversations table
const clients_front_conversations = table('clients_front_conversations')
  .columns({
    id: string(),
    client_id: string(),
    front_conversation_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front teammates table
const front_teammates = table('front_teammates')
  .columns({
    id: string(),
    front_id: string(),
    email: string().optional(),
    username: string().optional(),
    first_name: string().optional(),
    last_name: string().optional(),
    is_admin: boolean().optional(),
    is_available: boolean().optional(),
    is_blocked: boolean().optional(),
    teammate_type: string().optional(),
    custom_fields: json().optional(),
    api_links: json().optional(),
    created_at_timestamp: number().optional(),
    updated_at_timestamp: number().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front tickets table
const front_tickets = table('front_tickets')
  .columns({
    id: string(),
    front_id: string().optional(),
    ticket_id: string().optional(),
    subject: string().optional(),
    status: string().optional(),
    status_category: string().optional(),
    status_id: string().optional(),
    created_at_timestamp: number().optional(),
    updated_at_timestamp: number().optional(),
    custom_fields: json().optional(),
    metadata: json().optional(),
    api_links: json().optional(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Front conversation tickets table
const front_conversation_tickets = table('front_conversation_tickets')
  .columns({
    id: string(),
    front_conversation_id: string(),
    front_ticket_id: string(),
    created_at: number(),
    updated_at: number(),
  })
  .primaryKey('id');

// Users relationships
const usersRelationships = relationships(users, ({ many }) => ({
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['user_id'],
  }),
  // SKIPPED: assignedJobs - foreign key 'assigned_to_id' does not exist in jobs table,
  assignedTasks: many({
    sourceField: ['id'],
    destSchema: tasks,
    destField: ['assigned_to_id'],
  }),
  jobAssignments: many({
    sourceField: ['id'],
    destSchema: job_assignments,
    destField: ['user_id'],
  }),
  // Rails has_many :technicianJobs, through: :job_assignments -> Use jobAssignments.related('job') in Zero.js,
  scheduledDateTimeUsers: many({
    sourceField: ['id'],
    destSchema: scheduled_date_time_users,
    destField: ['user_id'],
  }),
  // Rails has_many :scheduledDateTimes, through: :scheduled_date_time_users -> Use scheduledDateTimeUsers.related('scheduled_date_time') in Zero.js,
  notes: many({
    sourceField: ['id'],
    destSchema: notes,
    destField: ['user_id'],
  }),
}));

// Clients relationships
const clientsRelationships = relationships(clients, ({ many }) => ({
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
  people: many({
    sourceField: ['id'],
    destSchema: people,
    destField: ['client_id'],
  }),
  jobs: many({
    sourceField: ['id'],
    destSchema: jobs,
    destField: ['client_id'],
  }),
  devices: many({
    sourceField: ['id'],
    destSchema: devices,
    destField: ['client_id'],
  }),
  peopleGroups: many({
    sourceField: ['id'],
    destSchema: people_groups,
    destField: ['client_id'],
  }),
  clientsFrontConversations: many({
    sourceField: ['id'],
    destSchema: clients_front_conversations,
    destField: ['client_id'],
  }),
  // Rails has_many :frontConversations, through: :clients_front_conversations -> Use clientsFrontConversations.related('front_conversation') in Zero.js
}));

// Jobs relationships
const jobsRelationships = relationships(jobs, ({ one, many }) => ({
  client: one({
    sourceField: ['client_id'],
    destField: ['id'],
    destSchema: clients,
  }),
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
  jobAssignments: many({
    sourceField: ['id'],
    destSchema: job_assignments,
    destField: ['job_id'],
  }),
  // Rails has_many :technicians, through: :job_assignments -> Use jobAssignments.related('user') in Zero.js,
  jobPeople: many({
    sourceField: ['id'],
    destSchema: job_people,
    destField: ['job_id'],
  }),
  // Rails has_many :people, through: :job_people -> Use jobPeople.related('person') in Zero.js,
  jobTargets: many({
    sourceField: ['id'],
    destSchema: job_targets,
    destField: ['job_id'],
  }),
  tasks: many({
    sourceField: ['id'],
    destSchema: tasks,
    destField: ['job_id'],
  }),
  allTasks: many({
    sourceField: ['id'],
    destSchema: tasks,
    destField: ['job_id'],
  }),
  notes: many({
    sourceField: ['id'],
    destSchema: notes,
    destField: ['notable_id'],
  }),
  scheduledDateTimes: many({
    sourceField: ['id'],
    destSchema: scheduled_date_times,
    destField: ['schedulable_id'],
  }),
}));

// Tasks relationships
const tasksRelationships = relationships(tasks, ({ one, many }) => ({
  job: one({
    sourceField: ['job_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  assignedTo: one({
    sourceField: ['assigned_to_id'],
    destField: ['id'],
    destSchema: users,
  }),
  parent: one({
    sourceField: ['parent_id'],
    destField: ['id'],
    destSchema: tasks,
  }),
  repositionedAfter: one({
    sourceField: ['repositioned_after_id'],
    destField: ['id'],
    destSchema: tasks,
  }),
  notes: many({
    sourceField: ['id'],
    destSchema: notes,
    destField: ['notable_id'],
  }),
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
  subtasks: many({
    sourceField: ['id'],
    destSchema: tasks,
    destField: ['parent_id'],
  }),
  children: many({
    sourceField: ['id'],
    destSchema: tasks,
    destField: ['parent_id'],
  }),
}));

// People relationships
const peopleRelationships = relationships(people, ({ one, many }) => ({
  client: one({
    sourceField: ['client_id'],
    destField: ['id'],
    destSchema: clients,
  }),
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
  contactMethods: many({
    sourceField: ['id'],
    destSchema: contact_methods,
    destField: ['person_id'],
  }),
  devices: many({
    sourceField: ['id'],
    destSchema: devices,
    destField: ['person_id'],
  }),
  notes: many({
    sourceField: ['id'],
    destSchema: notes,
    destField: ['notable_id'],
  }),
  peopleGroupMemberships: many({
    sourceField: ['id'],
    destSchema: people_group_memberships,
    destField: ['person_id'],
  }),
  // Rails has_many :peopleGroups, through: :people_group_memberships -> Use peopleGroupMemberships.related('people_group') in Zero.js,
  peopleFrontConversations: many({
    sourceField: ['id'],
    destSchema: people_front_conversations,
    destField: ['person_id'],
  }),
  // Rails has_many :frontConversations, through: :people_front_conversations -> Use peopleFrontConversations.related('front_conversation') in Zero.js
}));

// Devices relationships
const devicesRelationships = relationships(devices, ({ one, many }) => ({
  client: one({
    sourceField: ['client_id'],
    destField: ['id'],
    destSchema: clients,
  }),
  person: one({
    sourceField: ['person_id'],
    destField: ['id'],
    destSchema: people,
  }),
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
}));

// Notes relationships
const notesRelationships = relationships(notes, ({ one }) => ({
  notableJob: one({
    sourceField: ['notable_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  notablePerson: one({
    sourceField: ['notable_id'],
    destField: ['id'],
    destSchema: people,
  }),
  notableTask: one({
    sourceField: ['notable_id'],
    destField: ['id'],
    destSchema: tasks,
  }),
  // Polymorphic model: NoteNotablePolymorphic - see generated Polymorphic models,
  user: one({
    sourceField: ['user_id'],
    destField: ['id'],
    destSchema: users,
  }),
}));

// Activity logs relationships
const activity_logsRelationships = relationships(activity_logs, ({ one }) => ({
  user: one({
    sourceField: ['user_id'],
    destField: ['id'],
    destSchema: users,
  }),
  loggableClient: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: clients,
  }),
  loggableDevice: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: devices,
  }),
  loggableJob: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  loggablePeopleGroup: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: people_groups,
  }),
  loggablePeopleGroupMembership: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: people_group_memberships,
  }),
  loggablePerson: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: people,
  }),
  loggableScheduledDateTime: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: scheduled_date_times,
  }),
  loggableTask: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: tasks,
  }),
  loggableUser: one({
    sourceField: ['loggable_id'],
    destField: ['id'],
    destSchema: users,
  }),
  // Polymorphic model: ActivityLogLoggablePolymorphic - see generated Polymorphic models,
  client: one({
    sourceField: ['client_id'],
    destField: ['id'],
    destSchema: clients,
  }),
  job: one({
    sourceField: ['job_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
}));

// Contact methods relationships
const contact_methodsRelationships = relationships(contact_methods, ({ one, many }) => ({
  person: one({
    sourceField: ['person_id'],
    destField: ['id'],
    destSchema: people,
  }),
  frontConversations: many({
    sourceField: ['id'],
    destSchema: front_conversations,
    destField: ['recipient_handle'],
  }),
  frontMessageRecipients: many({
    sourceField: ['id'],
    destSchema: front_message_recipients,
    destField: ['handle'],
  }),
}));

// Scheduled date times relationships
const scheduled_date_timesRelationships = relationships(scheduled_date_times, ({ one, many }) => ({
  schedulableJob: one({
    sourceField: ['schedulable_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  // Polymorphic model: ScheduledDateTimeSchedulablePolymorphic - see generated Polymorphic models,
  activityLogs: many({
    sourceField: ['id'],
    destSchema: activity_logs,
    destField: ['loggable_id'],
  }),
  scheduledDateTimeUsers: many({
    sourceField: ['id'],
    destSchema: scheduled_date_time_users,
    destField: ['scheduled_date_time_id'],
  }),
  // Rails has_many :users, through: :scheduled_date_time_users -> Use scheduledDateTimeUsers.related('user') in Zero.js
}));

// Job assignments relationships
const job_assignmentsRelationships = relationships(job_assignments, ({ one }) => ({
  job: one({
    sourceField: ['job_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  user: one({
    sourceField: ['user_id'],
    destField: ['id'],
    destSchema: users,
  }),
}));

// Job people relationships
const job_peopleRelationships = relationships(job_people, ({ one }) => ({
  job: one({
    sourceField: ['job_id'],
    destField: ['id'],
    destSchema: jobs,
  }),
  person: one({
    sourceField: ['person_id'],
    destField: ['id'],
    destSchema: people,
  }),
}));

// Create the complete schema
export const schema = createSchema({
  tables: [
    activity_logs,
    contact_methods,
    jobs,
    clients,
    devices,
    job_assignments,
    job_people,
    people_groups,
    people_group_memberships,
    notes,
    job_targets,
    front_conversations,
    scheduled_date_times,
    scheduled_date_time_users,
    people,
    front_contacts,
    tasks,
    front_inboxes,
    front_tags,
    front_messages,
    front_attachments,
    users,
    front_conversation_tags,
    front_message_recipients,
    front_conversation_inboxes,
    parsed_emails,
    front_sync_logs,
    people_front_conversations,
    clients_front_conversations,
    front_teammates,
    front_tickets,
    front_conversation_tickets,
  ],
  relationships: [
    usersRelationships,
    clientsRelationships,
    jobsRelationships,
    tasksRelationships,
    peopleRelationships,
    devicesRelationships,
    notesRelationships,
    activity_logsRelationships,
    contact_methodsRelationships,
    scheduled_date_timesRelationships,
    job_assignmentsRelationships,
    job_peopleRelationships,
  ],
});

export type ZeroClient = Zero<typeof schema>;

// Table type exports for convenience
