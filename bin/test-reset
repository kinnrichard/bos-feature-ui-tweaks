#!/bin/bash

# Test Server Reset Script
# Comprehensive reset of all test servers with health validation
# Usage: bin/test-reset [--verbose] [--skip-health-check]

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
VERBOSE=false
SKIP_HEALTH_CHECK=false
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Parse command line arguments
for arg in "$@"; do
  case $arg in
    --verbose)
      VERBOSE=true
      shift
      ;;
    --skip-health-check)
      SKIP_HEALTH_CHECK=true
      shift
      ;;
    --help)
      echo "Usage: bin/test-reset [--verbose] [--skip-health-check]"
      echo ""
      echo "Options:"
      echo "  --verbose            Show detailed output"
      echo "  --skip-health-check  Skip final health validation"
      echo "  --help               Show this help message"
      exit 0
      ;;
    *)
      echo -e "${RED}Unknown option: $arg${NC}"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Logging functions
log() {
  echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
  echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
  echo -e "${RED}‚ùå $1${NC}"
}

verbose_log() {
  if [ "$VERBOSE" = true ]; then
    echo -e "${BLUE}[DEBUG]${NC} $1"
  fi
}

# Function to check if a port is in use
is_port_in_use() {
  local port=$1
  lsof -ti:$port >/dev/null 2>&1
}

# Function to kill processes on a port
kill_port() {
  local port=$1
  local service_name=$2
  
  if is_port_in_use $port; then
    verbose_log "Killing processes on port $port ($service_name)"
    local pids=$(lsof -ti:$port 2>/dev/null || true)
    if [ ! -z "$pids" ]; then
      echo "$pids" | xargs kill -9 2>/dev/null || true
      log "Killed $service_name processes on port $port"
    fi
  else
    verbose_log "Port $port ($service_name) is already free"
  fi
}

# Function to wait for a port to be free
wait_for_port_free() {
  local port=$1
  local max_wait=10
  local wait_count=0
  
  while is_port_in_use $port && [ $wait_count -lt $max_wait ]; do
    verbose_log "Waiting for port $port to be free... ($wait_count/$max_wait)"
    sleep 1
    ((wait_count++))
  done
  
  if is_port_in_use $port; then
    warning "Port $port is still in use after $max_wait seconds"
    return 1
  fi
  
  return 0
}

# Function to check server health
check_server_health() {
  local port=$1
  local service_name=$2
  local endpoint=$3
  local timeout=${4:-5}
  
  verbose_log "Checking health of $service_name on port $port"
  
  if curl -f -s --max-time $timeout "http://localhost:$port$endpoint" >/dev/null 2>&1; then
    success "$service_name (port $port) is healthy"
    return 0
  else
    error "$service_name (port $port) is not responsive"
    return 1
  fi
}

# Main execution
main() {
  log "üöÄ Starting comprehensive test server reset..."
  
  # Step 1: Kill all test servers
  log "üî• Killing existing test servers..."
  
  # Test server ports (Rails, Zero.js, Frontend)
  kill_port 4000 "Rails API"
  kill_port 4850 "Zero.js Cache"  
  kill_port 6173 "Frontend Dev Server"
  
  # Also kill any other common development ports that might interfere
  kill_port 3000 "Alternative Rails"
  kill_port 5173 "Alternative Frontend"
  kill_port 8080 "Alternative Web Server"
  
  # Wait for ports to be freed
  log "‚è≥ Waiting for ports to be freed..."
  wait_for_port_free 4000 && verbose_log "Port 4000 (Rails) is free"
  wait_for_port_free 4850 && verbose_log "Port 4850 (Zero.js) is free"
  wait_for_port_free 6173 && verbose_log "Port 6173 (Frontend) is free"
  
  # Step 2: Clean up any stale files
  log "üßπ Cleaning up stale files..."
  
  cd "$PROJECT_ROOT"
  
  # Remove PID files if they exist
  rm -f tmp/pids/*.pid 2>/dev/null || true
  rm -f frontend/tmp/pids/*.pid 2>/dev/null || true
  
  # Remove any lock files
  rm -f tmp/*.lock 2>/dev/null || true
  rm -f frontend/tmp/*.lock 2>/dev/null || true
  
  # Clean up any cached authentication files
  rm -rf frontend/playwright/.auth/ 2>/dev/null || true
  mkdir -p frontend/playwright/.auth/
  
  # Clean up test artifacts
  rm -f frontend/debug-*.png 2>/dev/null || true
  rm -rf frontend/test-results/ 2>/dev/null || true
  
  verbose_log "Cleanup complete"
  
  # Step 3: Start fresh servers
  log "üöÄ Starting fresh test servers..."
  
  if [ -f "bin/test-servers" ]; then
    chmod +x bin/test-servers
    bin/test-servers &
    SERVER_PID=$!
    verbose_log "Started test servers with PID: $SERVER_PID"
  else
    error "bin/test-servers script not found"
    exit 1
  fi
  
  # Step 4: Wait for servers to start
  log "‚è≥ Waiting for servers to start up..."
  sleep 10
  
  # Step 5: Health check (unless skipped)
  if [ "$SKIP_HEALTH_CHECK" = false ]; then
    log "üè• Performing health checks..."
    
    local health_ok=true
    
    # Check Rails API
    if ! check_server_health 4000 "Rails API" "/api/v1/health" 10; then
      health_ok=false
    fi
    
    # Check Zero.js (may not have a standard health endpoint)
    if is_port_in_use 4850; then
      success "Zero.js Cache (port 4850) is running"
    else
      error "Zero.js Cache (port 4850) is not running"
      health_ok=false
    fi
    
    # Check Frontend
    if ! check_server_health 6173 "Frontend Dev Server" "/" 10; then
      health_ok=false
    fi
    
    if [ "$health_ok" = true ]; then
      success "All test servers are healthy and ready!"
    else
      error "Some servers failed health checks"
      log "Server status:"
      log "  Rails API (4000): $(is_port_in_use 4000 && echo "Running" || echo "Not running")"
      log "  Zero.js (4850): $(is_port_in_use 4850 && echo "Running" || echo "Not running")"
      log "  Frontend (6173): $(is_port_in_use 6173 && echo "Running" || echo "Not running")"
      exit 1
    fi
  else
    log "‚è≠Ô∏è  Skipping health checks (--skip-health-check specified)"
  fi
  
  # Step 6: Final status
  log "üìä Final server status:"
  log "  Rails API: http://localhost:4000"
  log "  Zero.js Cache: http://localhost:4850"  
  log "  Frontend: http://localhost:6173"
  
  success "Test server reset complete! üéâ"
  log "You can now run your tests with: npm test"
}

# Run main function
main "$@"